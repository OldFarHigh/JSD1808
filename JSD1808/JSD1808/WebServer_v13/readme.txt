解决地址栏传递中文的问题。

由于HTTP协议要求，其协议内出现的字符串不允许使用中文
（因为HTTP协议使用的是ISO8859-1编码，这是一个欧洲编码集，不支持中文）、
因此，我们常见的解决办法就是将中文按照UTF-8编码转换为3个字节，
然后每个字节以“%xx”的三个字符形式表示为一个字节，然后将这些内容拼接在地址栏中传递。
（%xx这里的内容为2位16进制，2位16进制可以表示一个8位2进制，因此2位16进制表示1字节内容。）

10进制									2进制							16进制
0											0000									0
1											0001									1
2											0010									2
3											0011									3
4											0100									4
5											0101									5
6											0110									6
7											0111									7
8											1000									8
9											1001									9
10											1010									A
11											1011									B
12											1100									C	
13											1101									D
14											1110									E
15											1111									F	

1位16进制表示4位2进制
2位16进制就可以表示8位2进制
举例：
CE---->11001110
FF----->11111111
10----->00010000
7F----->01111111

换算方式：

11111111：计算负数 取反+1
取反：
00000000
+1：
00000001这是正数的1
那么11111111就是负数的1即：-1

反推：
-23的2进制是多少？
先对正数23进行-1操作
23-1=22
那么22的2进制为:
00010110
取反为：
11101001
这就是-23的2进制
取反：

URL中若出现中文的过程为：
username =”范“
1：将”范“按照UTF-8编码转换为3个字节，内容为：
对应的2进制为  ：11101000   10001100  10000011
对应的10进制为：-24				-116			 -125
对应的16进制为：E8				8C				 83

2：将每个字节以2位16进制形式表示，前面拼接一个%
%E8%8C%83



java API 提供了对字符串中含有的“%xx”解析的类。我们直接使用即可对url中的中文进行还原，这个类叫URLDecoder


修改HttpRequest类，在解析出参数部分后，对参数内容解码，将%xx这样的内容还原为对应文字，
使得服务端能正确支持对应字符。