重构代码

由于所有的Servlet都要有处理业务操作的方法：service，
因此我们定义一个抽象类：HttpServlet，并定义抽象方法service，
这样将来所有的Servlet都继承该类时就一定会重写此方法了。

1：我们再servlets包中定义抽象类：HttpServlet。
2：修改所有Servlet,让他们继承HttpServlet。


使服务端支持重定向

响应客户端时，我们通常有两种模式
1：内部跳转
2：重定向

举例：当用户提交表单请求注册操作，服务端在处理完注册业务后
直接响应客户端注册结果的页面，这种响应方式就是内部跳转。
从业务逻辑直接跳转到结果界面，对于浏览器而言，它当前地址栏的路径时提交注册请求。
而实际看到的时注册结果页面。
这样有一个弊端，就是当用户点击刷新按钮再次发起请求时，会将表单再次提交，经过注册业务，
这会给服务端带来无谓的资源开销。


这时建议采取使用重定向方式响应客户端，即：
当用户提交表单后，服务端处理完毕响应给客户端一个路径，
当客户端接收到该路径后继续按照该路径再次发起请求而得到注册结果页面。
这时浏览器上地址栏应当是专门请求注册结果页面的路径了。
这样无论怎么刷新，都不会再经过注册业务。



重定向：
响应客户端时，重定向的方式需要响应状态代码：302
并且在响应头中指定：Location对应的值就是希望客户端再次发起请求时路径。
该响应不包含响应正文。



在HttpResponse中添加重定向方法：sendRedirect(String url)